{"version":3,"sources":["components/DisplayAddress.js","components/GettingLocation.js","components/Description.js","components/MapContainer.js","App.js","serviceWorker.js","index.js"],"names":["DisplayAddress","props","fixedNumber","distance","toFixed","className","park","address","borough","GettingLocation","state","recycleBins","latitude","longitude","index","getLocation","bind","getCoordinates","componentDidUpdate","navigator","geolocation","getCurrentPosition","this","alert","position","setState","coords","fetch","then","response","json","data","lat1","lat2","lon1","lon2","dlon","Math","PI","dlat","a","sin","cos","atan2","sqrt","prevProps","prevState","length","updatedDistance","map","recyclecan","calculatingDistance","revisedUpdatedDistance","filter","mile","isNaN","indexOf","min","closestOne","findShortestDistance","console","log","onClick","park_site_name","Component","Description","mapStyles","width","height","MapContainer","google","zoom","style","initialCenter","lat","lng","GoogleApiWrapper","apiKey","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3e3a3be2.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../App.css';\r\n\r\nfunction DisplayAddress(props) {\r\n\r\n    const fixedNumber =props.distance.toFixed(2)\r\n\r\n    return (\r\n        <div className='box'>\r\n            <p>The closest recycling is {fixedNumber} miles away from you and is at:</p>\r\n            <p>{props.park}</p>\r\n            <p>{props.address}, {props.borough}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DisplayAddress","import React, {Component} from 'react'\r\nimport DisplayAddress from './DisplayAddress'\r\n\r\nclass GettingLocation extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state= {\r\n            recycleBins: [],\r\n            latitude: 0,\r\n            longitude: 0,\r\n            distance: [],\r\n            index: 0\r\n        }\r\n        this.getLocation = this.getLocation.bind(this);\r\n        this.getCoordinates = this.getCoordinates.bind(this)\r\n        this.componentDidUpdate = this.componentDidUpdate.bind(this)\r\n    }\r\n\r\n    getLocation() {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(this.getCoordinates);\r\n        } else { \r\n            alert(\"Geolocation is not supported by this browser.\");\r\n        }\r\n    }\r\n\r\n    getCoordinates(position) {\r\n        this.setState({\r\n            latitude: position.coords.latitude,\r\n            longitude: position.coords.longitude\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://data.cityofnewyork.us/resource/sxx4-xhzg.json\")\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                this.setState({recycleBins: data})\r\n            })\r\n    }\r\n\r\n    calculatingDistance(lat1, lat2, lon1, lon2) {\r\n        const dlon = [lon2 - lon1] * [Math.PI / 180]\r\n        const dlat = [lat2 - lat1] * [Math.PI / 180]\r\n        const a = Math.sin(dlat / 2) * Math.sin(dlat / 2) + \r\n        Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * \r\n        Math.sin(dlon / 2) * Math.sin(dlon / 2)\r\n        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a))\r\n        const d = 3961 * c\r\n        return d\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if(prevState.distance.length !== prevState.recycleBins.length) {\r\n            const updatedDistance = prevState.recycleBins.map(recyclecan => {\r\n                return this.calculatingDistance(this.state.latitude, recyclecan.latitude, this.state.longitude, recyclecan.longitude)\r\n            })\r\n        this.setState({distance: updatedDistance})\r\n        }\r\n    }\r\n\r\n    findShortestDistance() {\r\n            const revisedUpdatedDistance = this.state.distance.filter(mile =>{\r\n                return !isNaN(mile)\r\n            })\r\n            const position = revisedUpdatedDistance.indexOf(Math.min(...revisedUpdatedDistance))\r\n            return position\r\n    }\r\n\r\n    render() {\r\n\r\n        const closestOne = this.findShortestDistance()\r\n        console.log(this.state.longitude, this.state.latitude)\r\n\r\n        return (\r\n            <div>\r\n                <button className='button' onClick={this.getLocation}><span className='skew-fix'>Find.</span></button>\r\n                {\r\n                    closestOne > 0 ?\r\n                    <DisplayAddress\r\n                                distance={this.state.distance[closestOne]}\r\n                                park={this.state.recycleBins[closestOne].park_site_name} \r\n                                address={this.state.recycleBins[closestOne].address} \r\n                                borough={this.state.recycleBins[closestOne].borough}\r\n                                latitude={this.state.recycleBins[closestOne].latitude}\r\n                                longitude={this.state.recycleBins[closestOne].longitude} \r\n                    /> : \r\n                    <p>Waiting for your location...</p>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GettingLocation","import React from 'react'\r\nimport '../App.css';\r\n\r\nfunction Description() {\r\n    return(\r\n        <div className='about'>\r\n            <h1>Please recycle. Find your nearest public recycling bin by  clicking Find button below. Thank you.</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Description","import React, { Component } from 'react';\r\nimport { Map, GoogleApiWrapper } from 'google-maps-react';\r\n\r\nconst mapStyles = {\r\n  width: '100%',\r\n  height: '100%'\r\n};\r\n\r\nexport class MapContainer extends Component {\r\n  render() {\r\n    return (\r\n      <Map\r\n        google={this.props.google}\r\n        zoom={14}\r\n        style={mapStyles}\r\n        initialCenter={{\r\n         lat: -1.2884,\r\n         lng: 36.8233\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: 'YOUR_GOOGLE_API_KEY_GOES_HERE'\r\n})(MapContainer);","import React from 'react';\r\nimport './App.css';\r\nimport GettingLocation from './components/GettingLocation';\r\nimport Description from './components/Description';\r\nimport MapContainer from './components/MapContainer'\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Description />\r\n      <GettingLocation />\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}